const questions = [
  // HTML Questions (30)
  { question: "What does HTML stand for?", options: ["Hyper Text Markup Language", "Hyperlinks and Text Markup Language", "Home Tool Markup Language", "Hyper Transfer Markup Language"], answer: "Hyper Text Markup Language" },
  { question: "Which tag is used to create a hyperlink in HTML?", options: ["<link>", "<a>", "<href>", "<hyper>"], answer: "<a>" },
  { question: "Which HTML tag is used to define an unordered list?", options: ["<ol>", "<ul>", "<li>", "<list>"], answer: "<ul>" },
  { question: "Which attribute provides alternative text for an image?", options: ["alt", "title", "src", "description"], answer: "alt" },
  { question: "What is the correct HTML tag for inserting a line break?", options: ["<br>", "<break>", "<lb>", "<newline>"], answer: "<br>" },
  { question: "Which tag is used for creating a table row?", options: ["<td>", "<th>", "<tr>", "<row>"], answer: "<tr>" },
  { question: "What is the purpose of the `<head>` tag in HTML?", options: ["To contain metadata", "To create the body content", "To define scripts", "To store comments"], answer: "To contain metadata" },
  { question: "Which tag is used to create a numbered list?", options: ["<ol>", "<ul>", "<li>", "<list>"], answer: "<ol>" },
  { question: "What does the `<title>` tag define?", options: ["Page title in the browser", "Main heading", "Navigation bar", "Page footer"], answer: "Page title in the browser" },
  { question: "Which tag is used to embed an image in HTML?", options: ["<img>", "<image>", "<pic>", "<media>"], answer: "<img>" },

  // CSS Questions (30)
  { question: "Which property changes text color in CSS?", options: ["font-color", "text-color", "color", "foreground"], answer: "color" },
  { question: "What is the default position of an element in CSS?", options: ["static", "relative", "absolute", "fixed"], answer: "static" },
  { question: "Which CSS property changes the background color?", options: ["color", "background-color", "bgcolor", "back-color"], answer: "background-color" },
  { question: "Which property sets the font size?", options: ["font-size", "text-size", "size", "text-style"], answer: "font-size" },
  { question: "Which CSS property makes text bold?", options: ["font-weight", "bold", "text-bold", "strong"], answer: "font-weight" },
  { question: "Which CSS unit is relative to the parent element’s font size?", options: ["px", "em", "rem", "pt"], answer: "em" },
  { question: "Which property controls the space between lines of text?", options: ["letter-spacing", "line-height", "word-spacing", "spacing"], answer: "line-height" },
  { question: "Which CSS property makes a webpage responsive?", options: ["grid", "flexbox", "media queries", "auto-scale"], answer: "media queries" },
  { question: "Which CSS property is used to make an element disappear?", options: ["visibility", "display", "opacity", "hide"], answer: "display" },
  { question: "Which CSS property sets an element’s transparency?", options: ["opacity", "transparent", "visibility", "alpha"], answer: "opacity" },

  // JavaScript Questions (40)
  { question: "Which function prints something in JavaScript?", options: ["console.log()", "print()", "log()", "echo()"], answer: "console.log()" },
  { question: "Which keyword declares a variable in JavaScript?", options: ["var", "let", "const", "variable"], answer: "var" },
  { question: "Which operator is used for strict comparison in JavaScript?", options: ["==", "===", "=", "!=="], answer: "===" },
  { question: "Which method converts a string to uppercase?", options: ["toUpperCase()", "upperCase()", "toCaps()", "makeUpper()"], answer: "toUpperCase()" },
  { question: "Which function parses a string into an integer?", options: ["parseInt()", "toInt()", "convertInt()", "makeInteger()"], answer: "parseInt()" },
  { question: "Which object represents the browser window?", options: ["window", "document", "navigator", "screen"], answer: "window" },
  { question: "Which function is used to delay execution in JavaScript?", options: ["setTimeout()", "setInterval()", "delay()", "pause()"], answer: "setTimeout()" },
  { question: "Which keyword defines an asynchronous function?", options: ["async", "await", "defer", "sync"], answer: "async" },
  { question: "What will `typeof null` return?", options: ["null", "undefined", "object", "string"], answer: "object" },
  { question: "Which array method removes the last element?", options: ["pop()", "push()", "shift()", "removeLast()"], answer: "pop()" },
  { question: "Which method adds a new element to an array?", options: ["push()", "unshift()", "add()", "append()"], answer: "push()" },
  { question: "What does JSON stand for?", options: ["JavaScript Object Notation", "Java Syntax Object Notation", "JavaScript Oriented Notation", "Java Source Open Notation"], answer: "JavaScript Object Notation" },
  { question: "Which function executes code at regular intervals?", options: ["setTimeout()", "setInterval()", "loop()", "repeat()"], answer: "setInterval()" },
  { question: "Which method converts an array into a string?", options: ["join()", "toString()", "convert()", "merge()"], answer: "toString()" },
  { question: "Which symbol is used for function expressions in ES6?", options: ["=>", "->", "::", "**"], answer: "=>" },
  { question: "Which function merges two arrays?", options: ["concat()", "merge()", "combine()", "joinArrays()"], answer: "concat()" },
  { question: "Which loop always executes at least once?", options: ["for", "while", "do-while", "foreach()"], answer: "do-while" },
  { question: "Which object stores local storage data?", options: ["localStorage", "sessionStorage", "windowStorage", "cookieStorage"], answer: "localStorage" },
  { question: "Which event is triggered when a user clicks an element?", options: ["onClick", "onHover", "onPress", "onMouseDown"], answer: "onClick" },
  { question: "Which statement correctly declares a JavaScript class?", options: ["class MyClass {}", "MyClass = class {}", "new class MyClass {}", "class = MyClass {}"], answer: "class MyClass {}" },
  { question: "Which operator is used for exponentiation?", options: ["^", "**", "pow()", "exp()"], answer: "**" },
  { question: "What does `NaN` stand for in JavaScript?", options: ["Not a Number", "Null and None", "Not a Null", "No Any Number"], answer: "Not a Number" },
  { question: "Which loop is used to iterate over object properties?", options: ["for...in", "for...of", "foreach()", "map()"], answer: "for...in" },
  { question: "Which method returns the first matching element?", options: ["querySelector()", "getElementById()", "findElement()", "searchElement()"], answer: "querySelector()" },
  // React Questions
  { question: "What is React?", options: ["A JavaScript library for UI", "A backend framework", "A CSS framework", "A database management tool"], answer: "A JavaScript library for UI" },
  { question: "What is JSX?", options: ["JavaScript XML", "JavaScript Extension", "JavaScript XHR", "Java XML Syntax"], answer: "JavaScript XML" },
  { question: "What hook is used to manage state in functional components?", options: ["useState", "useEffect", "useReducer", "useRef"], answer: "useState" },
  { question: "How do you pass data to child components?", options: ["Using props", "Using state", "Using Redux", "Using localStorage"], answer: "Using props" },
  { question: "What is the virtual DOM?", options: ["A copy of the actual DOM", "A real-time database", "A new HTML version", "An alternative to CSS"], answer: "A copy of the actual DOM" },
  { question: "Which hook is used for side effects?", options: ["useState", "useEffect", "useContext", "useReducer"], answer: "useEffect" },
  { question: "What is the correct way to create a functional component?", options: ["function MyComponent() {}", "class MyComponent extends Component {}", "const MyComponent = new Component()", "component MyComponent {}"], answer: "function MyComponent() {}" },
  { question: "Which statement is used to render a component conditionally?", options: ["if statement", "ternary operator", "&& operator", "All of the above"], answer: "All of the above" },
  { question: "How do you handle forms in React?", options: ["Controlled components", "Uncontrolled components", "Both", "None"], answer: "Both" },
  { question: "Which hook is used to access context in a functional component?", options: ["useState", "useContext", "useReducer", "useEffect"], answer: "useContext" },
  { question: "Which React method is used to update the state of a class component?", options: ["setState()", "updateState()", "this.setState()", "changeState()"], answer: "this.setState()" },
  { question: "What does `useReducer` hook return?", options: ["State and Dispatch function", "Only new state", "Dispatch function only", "It returns nothing"], answer: "State and Dispatch function" },
  { question: "How do you handle side effects in React?", options: ["useState", "useEffect", "useReducer", "useCallback"], answer: "useEffect" },
  { question: "What does `React.memo` do?", options: ["Memoizes a component", "Stores state", "Fetches data", "None"], answer: "Memoizes a component" },
  { question: "How do you create a context in React?", options: ["React.createContext()", "useContext()", "Context.create()", "createContextAPI()"], answer: "React.createContext()" },
  { question: "What is React Router used for?", options: ["Navigation between pages", "Managing state", "Styling components", "Fetching API data"], answer: "Navigation between pages" },
  { question: "What is the main advantage of React?", options: ["Component-based architecture", "Fast rendering with Virtual DOM", "Reusable components", "All of the above"], answer: "All of the above" },
  { question: "What does `useRef` hook return?", options: ["A mutable object", "A function", "A boolean", "A string"], answer: "A mutable object" },
  { question: "Which lifecycle method runs after a component mounts?", options: ["componentDidMount", "componentDidUpdate", "componentWillUnmount", "constructor"], answer: "componentDidMount" },
  { question: "What does `useCallback` do?", options: ["Memoizes a function", "Calls a function", "Creates a new function", "Deletes a function"], answer: "Memoizes a function" },
  { question: "Which React feature helps avoid prop drilling?", options: ["Context API", "Redux", "Hooks", "All of the above"], answer: "All of the above" },
  { question: "Which method is used to render lists in React?", options: ["map()", "forEach()", "filter()", "loop()"], answer: "map()" },
  { question: "What is the purpose of the `key` attribute in lists?", options: ["To improve performance", "To sort elements", "To add styles", "To change the DOM"], answer: "To improve performance" },
  { question: "Which React hook is used for performance optimization?", options: ["useMemo", "useEffect", "useState", "useRef"], answer: "useMemo" },
  

];
export default questions;
